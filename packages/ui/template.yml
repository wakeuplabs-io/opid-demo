AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: UI

Parameters:
  StackName:
    Description: The cloudformation stack name, MUST be lower case
    Type: String
  DomainName: 
    Description: The domain name of the existing Route 53 hosted zone
    Type: String

Resources:
  SecurityHeadersPolicy:
    Type: AWS::CloudFront::ResponseHeadersPolicy
    Properties:
      ResponseHeadersPolicyConfig:
        Name: !Sub "${StackName}CustomSecurityHeadersPolicy"
        Comment: Security headers for CloudFront distribution
        SecurityHeadersConfig:
          StrictTransportSecurity:
            AccessControlMaxAgeSec: 63072000
            IncludeSubdomains: true
            Override: true
            Preload: true
          ContentTypeOptions:
            Override: true
          FrameOptions:
            FrameOption: DENY
            Override: true
          ReferrerPolicy:
            ReferrerPolicy: no-referrer
            Override: true
          XSSProtection:
            Protection: true
            ModeBlock: true
            Override: true

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${StackName}.${DomainName}"
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: s3:GetObject
            Resource: !Sub "arn:aws:s3:::${S3Bucket}/*"

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        DefaultRootObject: index.html
        Origins:
          - Id: !Sub "${StackName}S3Origin"
            DomainName: !Sub "${S3Bucket}.s3-website-${AWS::Region}.amazonaws.com"
            CustomOriginConfig:
              OriginProtocolPolicy: http-only
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        DefaultCacheBehavior:
          TargetOriginId: !Sub "${StackName}S3Origin"
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - HEAD
            - GET
          CachedMethods:
            - HEAD
            - GET
          Compress: true
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 #CacheOptimizedPolicy
          ResponseHeadersPolicyId: !Ref SecurityHeadersPolicy
        CacheBehaviors:
          - PathPattern: index.html
            TargetOriginId: !Sub "${StackName}S3Origin"
            ViewerProtocolPolicy: redirect-to-https 
            AllowedMethods:
              - HEAD
              - GET
            CachedMethods:
              - HEAD
              - GET
            Compress: true
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad #CacheDisabledPolicy
            ResponseHeadersPolicyId: !Ref SecurityHeadersPolicy
          - PathPattern: /static/js/*.js
            TargetOriginId: !Sub "${StackName}S3Origin"
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - HEAD
              - GET
            CachedMethods:
              - HEAD
              - GET
            Compress: true
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 #CacheOptimizedPolicy
            ResponseHeadersPolicyId: !Ref SecurityHeadersPolicy
        Enabled: true
        PriceClass: PriceClass_All
  ##  Enable for HTTPS 
  #       Aliases:
  #         - !Sub ${S3Bucket}
  #       ViewerCertificate:
  #         AcmCertificateArn: !Sub "arn:aws:acm:${AWS::Region}:447655722442:certificate/${CertificateId}"
  #         SslSupportMethod: sni-only
  #         MinimumProtocolVersion: TLSv1.2_2021
          
  # WebsiteAliasRecord:
  #   Type: AWS::Route53::RecordSet
  #   Properties:
  #     HostedZoneId: !Sub ${HostedZoneId}
  #     Name: !Sub ${S3Bucket}
  #     Type: CNAME
  #     TTL: '86400'
  #     ResourceRecords:
  #       - !GetAtt CloudFrontDistribution.DomainName

Outputs:
  Url:
    Description: Public URL
    Value: !GetAtt CloudFrontDistribution.DomainName